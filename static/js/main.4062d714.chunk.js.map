{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","editedTaskList","remainingTasks","taskList","key","filterList","isPressed","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4062d714.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What Needs to Be Done?\r\n        </label>\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    \r\n      <button \r\n      type=\"button\" \r\n      className=\"btn toggle-btn\" \r\n      aria-pressed=\"{props.isPressed}\"\r\n      onClick={() => props.setFilter(props.name)}\r\n      >\r\n        <span className=\"visually-hidden\">Show </span>\r\n        <span>{props.name}</span>\r\n        <span className=\"visually-hidden\"> Tasks</span>\r\n      </button>\r\n    \r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n        <input\r\n          id={props.id}\r\n          type=\"checkbox\"\r\n          defaultChecked={props.completed}\r\n          onChange={() => props.toggleTaskCompleted(props.id)}\r\n        />\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          {props.name}\r\n        </label>\r\n      </div>\r\n      <div className=\"btn-group\">\r\n        <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\r\n          Edit <span className=\"visually-hidden\">{props.name}</span>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn__danger\"\r\n          onClick={() => props.deleteTask(props.id)}\r\n        >\r\n          Delete <span className=\"visually-hidden\">{props.name}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","import React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport \"./App.css\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  \n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map((task) => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n    key={name} \n    name={name}\n    isPressed={name === filter}\n    setFilter={setFilter}\n    />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? \"tasks\" : \"task\";\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Code\", completed: false },\n  { id: \"todo-3\", name: \"Repeat\", completed: false }\n];\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}